name: CI/CD Pipeline for Terraform and Ansible

on:
  push:
    branches:
      - main  # Trigger pipeline when code is pushed to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set AWS Credentials
    - name: Set AWS Credentials
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

    # Step 3: Set up Terraform
    - name: Set up Terraform 
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'

    # Step 4: Terraform Init - Initialize Terraform configuration
    - name: Terraform Init  
      run: terraform init

    # Step 5: Terraform Apply - Apply the Terraform configuration to provision the infrastructure
    - name: Terraform Apply
      run: terraform apply -auto-approve


    - name: Get EC2 Public IP and create hosts.ini file for Ansible
      run: |
        EC2_PUBLIC_IP=$(terraform output instance_public_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -1)
  
        if [ -z "$EC2_PUBLIC_IP" ]; then
          echo "Error: EC2_PUBLIC_IP is not set."
          exit 1
        fi
  
        # Validate IPv4 format
        if ! echo "$EC2_PUBLIC_IP" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "Error: Invalid IP format '$EC2_PUBLIC_IP'"
          exit 1
        fi
  
        # Save IP to GitHub environment
        echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
  
        # Generate Ansible hosts.ini file
        echo "[web_servers]" > hosts.ini
        echo "$EC2_PUBLIC_IP ansible_ssh_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> hosts.ini
        cat hosts.ini

        
    - name: Wait for instance readiness
      run: sleep 125
    # Step 7: Set up SSH known_hosts and private key
    - name: Set up SSH known_hosts and private key
      run: |
        # Create .ssh directory
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh

        # Print EC2_PUBLIC_IP for debugging
        echo "EC2_PUBLIC_IP: $EC2_PUBLIC_IP"

        # Write SSH private key
        echo "${{ secrets.PEM }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "It's Working!!! Hurraaaayy"

        
    - name: Add sleep
      run: sleep 30

    #step: add ssh_keyscan
    - name: Add EC2 host to known_hosts
      run: |
        ssh-keyscan -H "$EC2_PUBLIC_IP" >> ~/.ssh/known_hosts
        
    # Step 8: Install Ansible on the GitHub Actions runner
    - name: Install Ansible
      run: |
        sudo apt update
        sudo apt install -y ansible

    # Step 9: (Optional) Verify the SSH connection using Ansible
    - name: Test SSH Connection
      run: |
        ansible -i hosts.ini web_servers -m ping --private-key ~/.ssh/id_rsa
        
    # Step 10: Run Ansible Playbook to install Docker on the EC2 instance
    - name: Run Ansible Playbook
      run: |
        ansible-playbook -i hosts.ini docker.yml 

    # Step 11: (Optional) Destroy Terraform-managed resources after the pipeline runs
    - name: Terraform Destroy (Optional)
      run: terraform destroy -auto-approve
      if: github.event_name == 'push' && github.event.head_commit.message == 'destroy'
  
